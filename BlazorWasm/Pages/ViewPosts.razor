@page "/ViewPosts"
@using global::Shared.Models
@using HttpClients.ClientInterface
@using Microsoft.AspNetCore.Components
@inject IPostService postService;
@inject NavigationManager navMgr
@attribute [Authorize]

        <h3>Posts</h3>
<div class="filter-bar">
    <div class="filters-container">
        <img src="image/@(doShowFilters ? "clear_" : "")funnel.png" class="funnel" @onclick="@(() => doShowFilters = !doShowFilters)" alt="Funnel"/>
        @if (doShowFilters)
        {
            <div class="filter">
                <label>Username:</label>
                <input type="text" @bind="usernameFilter"/>
            </div>
            <div class="filter">
                <label>User id:</label>
                <input type="number" @bind="userIdFilter"/>
            </div>
            <div class="filter">
                <label>Title contains:</label>
                <input type="text" @bind="titleContainsFilter"/>
            </div>
            /*<div class="filter">
                <label>Body contains:</label>
                <input type="text" @bind="bodyContainsFilter"/>
            </div>*/
            <div>
                @if (!string.IsNullOrEmpty(msg))
                {
                    <label style="color: red">@msg</label>
                }
                
            </div>
        }
    </div>
</div>

<div>
    <button @onclick="LoadTodos">Load</button>
</div>

@if (posts == null)
{
}
else if (!posts.Any())
{
    <p>No Todos to display</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Post ID</th>
            <th>Owner</th>
            <th>Title</th>
            <th>Body</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in posts)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.Owner.UserName</td>
                <td>@item.Title</td>
                <td>@item.Body</td>
            </tr>
        }
        </tbody>
    </table>
}
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

@code {
    private IEnumerable<Post>? posts;
    private string msg = "";
    private bool doShowFilters = false;

    private string? usernameFilter;
    private int? userIdFilter;
    private string? titleContainsFilter;
    private string? bodyContainsFilter;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadTodos();
    }

    private async Task LoadTodos()
    {
        try
        {
            bool? completedFilterValue = null;
            posts = await postService.GetAsync(usernameFilter, userIdFilter, titleContainsFilter/*, bodyContainsFilter*/);
            
            var list = new List<Post>(posts!);
            list.Sort(CompareById);
            posts = list.AsEnumerable();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private int CompareById(Post x, Post y)
    {
        if (x.Id > y.Id)
        {
            return 1;
        }
        else
        {
            return -1;
        }
    }

}